# Generated by Django 5.0.7 on 2025-01-06 09:20

import common.enums
import django.db.models.deletion
import phonenumber_field.modelfields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('saved', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('first_name', models.CharField(max_length=255, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=255, verbose_name='Фамилия')),
                ('first_name_en', models.CharField(help_text='Ваше имя в системе ACP/LRM. Лучше всего посмотреть его в протоколе LRM или на сайте <a href="https://randonneur.me">с результатами LRM</a>', max_length=255, verbose_name='Имя латиницей')),
                ('last_name_en', models.CharField(help_text='Ваша фамилия в системе ACP/LRM. Лучше всего посмотреть её в протоколе LRM или на сайте <a href="https://randonneur.me">с результатами LRM</a>', max_length=255, verbose_name='Фамилия латиницей')),
                ('gender', models.IntegerField(choices=[(1, 'Мужской'), (2, 'Женский')], default=common.enums.Gender['M'], verbose_name='Пол')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(help_text='Укажите номер телефона для экстренной связи.Эта информация будет скрыта от других пользователей и видна только организаторам.', max_length=128, region=None, verbose_name='Номер телефона')),
                ('birthday', models.DateField(help_text='Эта информация будет скрыта от других пользователей и видна только организаторам.', verbose_name='Дата рождения')),
                ('location', models.CharField(blank=True, help_text='Откуда Вы? Эта информация будет отображаться напротив Вашего имени в списке участников.', max_length=255, verbose_name='Локация')),
                ('club', models.CharField(blank=True, help_text='С каким клубом Вы себя ассоциируете? Эта информация будет отображаться напротив Вашего имени в списке участников.', max_length=255, verbose_name='Домашний клуб')),
                ('address', models.TextField(help_text='Адрес для отправки дорожной карточки и медали. Эта информация будет скрыта от других пользователей и видна только организаторам.', verbose_name='Домашний адрес')),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.userprofile')),
            ],
            options={
                'verbose_name': 'Аккаунт',
                'verbose_name_plural': 'Аккаунты',
                'abstract': False,
            },
        ),
    ]
